
Write a solution to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.

 

Example 1:

Input: 
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+
Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+

# Write your MySQL query statement below
select name as results
from (select u.user_id,u.name,count(distinct movie_id) as cnt 
from Users u join Movierating mr 
using (user_id)
group by user_id
order by cnt desc,u.name asc limit 1) t1
union all
(select title as results
from 
(select m.movie_id,m.title,avg(mr.rating) as average 
from Movies m join Movierating mr
using (movie_id)
where left(mr.created_at,7)="2020-02"
group by m.movie_id
order by average desc,m.title limit 1)t2)


Output: 
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+


                              (or)
                         with tracing




Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.

Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |           user_id 1 and 2-->3times has given the rating
| 1           | 3            | 2            | 2020-02-12  |                   3-->2times given d rating
| 1           | 4            | 1            | 2020-01-01  |                   4--->1times given rating
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  |              so user 1,2 given greatest rating------>Daniel and Monica
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  |                   lexical order ------->Daniel
+-------------+--------------+--------------+-------------+

(select name as results)
from cte
group by name
order by count(*) desc,name asc limit 1)------>Daniel
union


Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+

MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |                       m_id   created at       Aaverage
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |                       1--    11,12  feb 2020    (4+2)/2=3 
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |                       2      17,1    feb 2020    5+2/2=3.5 --->frozen2    
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  |                       3       22,25  feb          3+4/2=3.5 ---->joker
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |                        lexical order ---------->Frozen2
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+


(select title
from cte 
where Date_Format(created_at,'%y-%m')=2020-02
group by title
order by avg(rating) desc,title asc limit1)

------------------------------------------------------------------------------------------------------------------------------------

(with cte as 
select mr.(*),m.title,u.name 
from MovieRating mr left join Users u
using (user_id)
left join Movies m
using (movie_id))

(select name as results)
from cte
group by name
order by count(*) desc,name asc limit 1)------>Daniel
union
(select title
from cte 
where Date_Format(created_at,'%y-%m')=2020-02
group by title
order by avg(rating) desc,title asc limit1)


